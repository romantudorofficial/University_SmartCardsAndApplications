// Homework 1

output on;



//  Create the Wallet instance.
0x80 0xB8 0x00 0x00 0x14 0x0a 0xa0 0x00 0x00 0x00 0x62 0x03 0x01 0x0C 0x06 0x01 0x08 0x00 0x00 0x05 0x01 0x02 0x03 0x04 0x05 0x7F;

//  Select the Wallet applet.
0x00 0xA4 0x04 0x00 0x0a 0xa0 0x00 0x00 0x00 0x62 0x03 0x01 0x0C 0x06 0x01 0x7F;

// 1. Verify user PIN (incorrect PIN).
0x80 0x20 0x00 0x00 0x05 0x01 0x02 0x03 0x04 0x06 0x7F;

// 1. Verify user PIN (correct PIN).
0x80 0x20 0x00 0x00 0x05 0x01 0x02 0x03 0x04 0x05 0x7F;

// 2. Debit from an account without RON and without points (RON only).
// Payment method: P1 = 0x01, amount = 0x10 (16 RON); expected to fail.
0x80 0x40 0x01 0x00 0x01 0x10 0x7F;

// 3. Credit the account with 80 RON.
0x80 0x30 0x00 0x00 0x01 0x50 0x7F;

// 4. Making purchases (payment with RON only).

// 4.1 Attempt purchase with insufficient RON: debit 100 RON (0x64) with P1 = 0x01; should fail.
0x80 0x40 0x01 0x00 0x01 0x64 0x7F;

// 4.2 Purchase with sufficient RON: debit 50 RON (0x32) with P1 = 0x01; should succeed and award loyalty points.
0x80 0x40 0x01 0x00 0x01 0x32 0x7F;

// 5. Get balance in RON (option 0x01).
0x80 0x50 0x00 0x00 0x01 0x01 0x7F;

// 6. Get balance in loyalty points (option 0x02).
0x80 0x50 0x00 0x00 0x01 0x02 0x7F;

// 7. Making purchases using points only.

// 7.1 Purchase with points only: debit 2 points with P1 = 0x02; should succeed.
0x80 0x40 0x02 0x00 0x01 0x02 0x7F;

// 7.2 Purchase with points only: debit 10 points with P1 = 0x02; expected to fail due to insufficient points.
0x80 0x40 0x02 0x00 0x01 0x0A 0x7F;

// 8. Making purchases with a combination of RON and points.

// 8.1 Combination: Sufficient RON but insufficient points.
// Attempt to use RON = 30 (0x1E) and points = 10 (0x0A) with P1 = 0x03; expected to fail.
0x80 0x40 0x03 0x00 0x02 0x1E 0x0A 0x7F;

// 8.2 Prepare for a valid combination:
// Credit additional 100 RON.
0x80 0x30 0x00 0x00 0x01 0x64 0x7F;

// To get some loyalty points, make a RON-only purchase of 60 RON (0x3C) with P1 = 0x01; awards 3 points.
0x80 0x40 0x01 0x00 0x01 0x3C 0x7F;

// 8.2 Combination: Use RON = 20 (0x14) and points = 2 (0x02) with P1 = 0x03; expected to succeed.
0x80 0x40 0x03 0x00 0x02 0x14 0x02 0x7F;

// 8.3 Combination: Attempt purchase with insufficient funds in RON.
// Try to use RON = 60 (0x3C) and points = 3 (0x03) with P1 = 0x03; expected to fail if RON balance is low.
0x80 0x40 0x03 0x00 0x02 0x3C 0x03 0x7F;

// 8.4 Combination: Valid purchase using both funds.
// Use RON = 30 (0x1E) and points = 1 (0x01) with P1 = 0x03; should succeed and award loyalty points for the RON portion.
0x80 0x40 0x03 0x00 0x02 0x1E 0x01 0x7F;

// 9. Get balance in RON.
0x80 0x50 0x00 0x00 0x01 0x01 0x7F;

// 10. Get balance in loyalty points.
0x80 0x50 0x00 0x00 0x01 0x02 0x7F;

// 11. Test the maximum loyalty points cap.

// Credit 200 RON.
0x80 0x30 0x00 0x00 0x01 0xC8 0x7F;

// Make a RON-only purchase of 200 RON to earn points (awards 10 points).
0x80 0x40 0x01 0x00 0x01 0xC8 0x7F;

// Credit another 200 RON.
0x80 0x30 0x00 0x00 0x01 0xC8 0x7F;

// Make another RON-only purchase of 200 RON.
0x80 0x40 0x01 0x00 0x01 0xC8 0x7F;

// Finally, get the loyalty points balance (should not exceed 300).
0x80 0x50 0x00 0x00 0x01 0x02 0x7F;